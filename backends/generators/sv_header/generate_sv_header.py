#!/usr/bin/env python3
"""
Generator script for SystemVerilog encoding header.
This script uses the existing generator.py functions to create RISCV_decode_pkg.svh.
"""
import os
import sys
import logging
import argparse
import yaml

# Add parent directory to path to import generator.py
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(parent_dir)

# Import functions from generator.py
from generator import (
    load_instructions,
    load_csrs,
)

logging.basicConfig(level=logging.INFO, format="%(levelname)s:: %(message)s")


def main():
    """Main function to generate encoding.h."""
    parser = argparse.ArgumentParser(
        description="Generate RISC-V SystemVerilog encoding header"
    )
    parser.add_argument(
        "--inst-dir",
        default="../../../arch/inst/",
        help="Directory containing instruction YAML files",
    )
    parser.add_argument(
        "--csr-dir",
        default="../../../arch/csr/",
        help="Directory containing CSR YAML files",
    )
    parser.add_argument(
        "--output",
        default="encoding.out.h",
        help="Output filename (default: encoding.out.h)",
    )
    parser.add_argument(
        "--include-all",
        "-a",
        action="store_true",
        help="Include all instructions, ignoring extension filtering",
    )
    parser.add_argument(
        "--debug", "-d", action="store_true", help="Enable debug logging"
    )
    parser.add_argument(
        "--extensions",
        "-e",
        nargs="+",
        default=[],
        help="List of extensions to include",
    )

    args = parser.parse_args()

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    this_dir = os.path.dirname(os.path.abspath(__file__))
    output_file = os.path.join(this_dir, args.output)

    # Load instructions and CSRs
    logging.info(f"Loading instructions from {args.inst_dir}")
    instructions = load_instructions(
        args.inst_dir, args.extensions, include_all=args.include_all, target_arch="BOTH"
    )

    logging.info(f"Loading CSRs from {args.csr_dir}")
    csrs = load_csrs(
        args.csr_dir, args.extensions, include_all=args.include_all, target_arch="BOTH"
    )

    # Process instructions
    instruction_string = ""
    for name, instr_data in sorted(instructions.items()):
        match_str = instr_data.get("match")
        if match_str:
            try:
                verilog_match = match_str.replace("-", "?")

                # Extend compressed instructions to 32 bits; fill upper bits with wildcards
                if len(verilog_match) < 32:
                    verilog_match = ("?" * (32 - len(verilog_match))) + verilog_match

                formatted_name = name.upper().replace(".", "_")
                instruction_string += (
                    f"  localparam [31:0] {formatted_name:<18} = 32'b{verilog_match};\n"
                )

            except Exception as e:
                logging.error(f"Error processing {name}: {e}")

    # Process CSRs
    csr_names_str = ""
    for addr, name in sorted(csrs.items()):
        formatted_name = f"CSR_{name.upper().replace('.','_')}"
        csr_names_str += f"  localparam [11:0] {formatted_name} = 12'h{addr:x};\n"

    # Assemble final output
    output_str = f"""/* SPDX-License-Identifier: BSD-3-Clause */
/* Copyright (c) 2025 RISC-V International */
/*
 * This file is auto-generated by riscv-unified-db
 */

package RISCV_decode_pkg;
{instruction_string}
/* CSR Addresses */
{csr_names_str}
endpackage
"""

    # Write output file
    with open(output_file, "w", encoding="utf-8") as enc_file:
        enc_file.write(output_str)

    logging.info(f"Generated encoding header file: {output_file}")


if __name__ == "__main__":
    main()
